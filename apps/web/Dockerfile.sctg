FROM node:20 AS builder

WORKDIR /app
RUN yarn global add turbo
COPY . .
# SCTG Branding
RUN cp assets/images/logo-sctg.svg assets/images/logo-color.svg
RUN cp assets/images/logo-sctg.svg apps/web/public/logo-color.svg
RUN cp assets/images/logo-sctg-mark.svg apps/web/public/images/logo-mark.svg
RUN cp assets/images/logo-sctg-mark.png apps/web/public/images/rallly-logo-mark.png
RUN cp assets/images/logo-sctg.svg apps/web/public/static/logo.svg
RUN cp assets/images/logo-sctg.svg apps/landing/public/logo.svg
RUN cp assets/images/logo-sctg.png apps/web/public/logo.png
RUN cp assets/images/logo-sctg.png apps/landing/public/logo.png
RUN cp assets/images/logo-sctg.png packages/emails/src/previews/static/logo.png
# Tools
RUN sed -i 's|prisma migrate deploy|source /db-S3.sh\nprisma migrate deploy|' scripts/docker-start.sh
#RUN find . -type f \( -name "*.ts" -o -name "*.tsx" -o -name "*.js" -o -name "*.jsx" -o -name "*.json" -o -name "*.html" -o -name "*.md" \) | xargs grep -l "https://support.rallly.co" | xargs sed -i 's|https://support\.rallly\.co|https://sctg.eu.org|g'
RUN find . -type f \( -name "*.ts" -o -name "*.tsx" -o -name "*.js" -o -name "*.jsx" -o -name "*.json" -o -name "*.html" -o -name "*.md" \) | xargs grep -l "https://rallly.co" | xargs sed -i 's|https://rallly\.co|https://sctg.eu.org|g'
RUN find . -type f \( -name "*.ts" -o -name "*.tsx" -o -name "*.js" -o -name "*.jsx" -o -name "*.json" -o -name "*.html" -o -name "*.md" \) | xargs grep -l "mailto:support@rallly.co" | xargs sed -i 's|"mailto:support@rallly.co"|"mailto:support@sctg.eu.org"|g'
RUN find . -type f \( -name "*.ts" -o -name "*.tsx" -o -name "*.js" -o -name "*.jsx" -o -name "*.json" -o -name "*.html" -o -name "*.md" \) | xargs grep -l "rallly.co" | xargs sed -i 's|"rallly.co"|"SCTG"|g'
RUN find . -type f \( -name "*.ts" -o -name "*.tsx" -o -name "*.js" -o -name "*.jsx" -o -name "*.json" -o -name "*.html" -o -name "*.md" \) | xargs grep -l "feedback@rallly.co" | xargs sed -i 's|feedback@rallly.co|feedback-rally@sctg.eu.org|g'
RUN sed -i 's|process.env.NEXT_PUBLIC_SELF_HOSTED === "true" ? "standalone" : undefined|"standalone"|' apps/web/next.config.js
RUN cd packages/proize && npm install --force && npm run build && cd -
RUN turbo prune --scope=@rallly/web --docker


FROM node:20 AS installer

WORKDIR /app
COPY .gitignore .gitignore
COPY --from=builder /app/out/json/ .
COPY --from=builder /app/out/yarn.lock ./yarn.lock
RUN yarn --network-timeout 1000000

# Build the project
COPY --from=builder /app/out/full/ .
COPY turbo.json turbo.json
RUN yarn db:generate

ARG APP_VERSION
ENV NEXT_PUBLIC_APP_VERSION=$APP_VERSION

ARG SELF_HOSTED
ENV NEXT_PUBLIC_SELF_HOSTED=$SELF_HOSTED

RUN SKIP_ENV_VALIDATION=1 yarn build

FROM node:20-slim AS runner

# prisma requirements
# (see https://www.prisma.io/docs/orm/reference/system-requirements)
RUN apt-get update \
  && apt-get install -y --no-install-recommends \
  openssl \
  zlib1g \
  libgcc-s1 \
  curl \
  postgresql-client \
  && rm -rf /var/lib/apt/lists/*

WORKDIR /app
COPY --from=ismogroup/busybox:1.37.0-php-8.3-apache /busybox-1.37.0/_install/bin/busybox /bin/busybox
RUN yarn global add prisma
# Don't run production as root
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs
RUN curl -L https://dl.min.io/client/mc/release/linux-$(dpkg --print-architecture)/mc > /usr/local/bin/mc && chmod +x /usr/local/bin/mc && mkdir -p /app/.mc && chown -R nextjs:nodejs /app/.mc
USER nextjs

COPY --from=builder --chown=nextjs:nodejs /app/scripts/docker-start.sh ./
COPY --from=builder --chown=nextjs:nodejs /app/scripts/db-S3.sh ./
COPY --from=builder --chown=nextjs:nodejs /app/packages/database/prisma ./prisma
COPY --from=builder --chown=nextjs:nodejs /app/packages/proize/dist/*.* ./proize/
COPY --from=builder --chown=nextjs:nodejs /app/packages/proize/src/prisma/*.node ./proize/

COPY --from=installer /app/apps/web/next.config.js .
COPY --from=installer /app/apps/web/package.json .

ENV PORT=3000
EXPOSE 3000

# Automatically leverage output traces to reduce image size
# https://nextjs.org/docs/advanced-features/output-file-tracing
COPY --from=installer --chown=nextjs:nodejs /app/apps/web/.next/standalone ./
COPY --from=installer --chown=nextjs:nodejs /app/apps/web/.next/static ./apps/web/.next/static
COPY --from=installer --chown=nextjs:nodejs /app/apps/web/public ./apps/web/public

ARG SELF_HOSTED
ENV NEXT_PUBLIC_SELF_HOSTED=$SELF_HOSTED
ENV HOSTNAME=0.0.0.0

HEALTHCHECK CMD curl --fail http://localhost:${PORT}/api/status || exit 1

CMD ["./docker-start.sh"]
